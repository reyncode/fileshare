// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, FilesCreateFileData, FilesCreateFileResponse, FilesReadFilesData, FilesReadFilesResponse, FilesReadFileData, FilesReadFileResponse, FilesUpdateFileData, FilesUpdateFileResponse, FilesDeleteFileData, FilesDeleteFileResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse } from './types.gen';

/**
 * Login Access Token
 * Validate the user's credentials and create a token if successful.
 * @param data The data for the request.
 * @param data.formData
 * @returns Token Successful Response
 * @throws ApiError
 */
export const loginLoginAccessToken = (data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/login/access-token',
    formData: data.formData,
    mediaType: 'application/x-www-form-urlencoded',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Test Token
 * Test access token
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const loginTestToken = (): CancelablePromise<LoginTestTokenResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/login/test-token'
}); };

/**
 * Create File
 * Create a new file database object with name owned by the current user.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns FilePublic Successful Response
 * @throws ApiError
 */
export const filesCreateFile = (data: FilesCreateFileData): CancelablePromise<FilesCreateFileResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/files/',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read Files
 * Get a list of files with the current_user's id.
 * @param data The data for the request.
 * @param data.skip
 * @param data.limit
 * @returns FilesPublic Successful Response
 * @throws ApiError
 */
export const filesReadFiles = (data: FilesReadFilesData = {}): CancelablePromise<FilesReadFilesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/files/',
    query: {
        skip: data.skip,
        limit: data.limit
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read File
 * Get an file by id.
 * @param data The data for the request.
 * @param data.fileId
 * @returns FilePublic Successful Response
 * @throws ApiError
 */
export const filesReadFile = (data: FilesReadFileData): CancelablePromise<FilesReadFileResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/files/{file_id}',
    path: {
        file_id: data.fileId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update File
 * Update a file by it's id.
 * @param data The data for the request.
 * @param data.fileId
 * @param data.requestBody
 * @returns FilePublic Successful Response
 * @throws ApiError
 */
export const filesUpdateFile = (data: FilesUpdateFileData): CancelablePromise<FilesUpdateFileResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/v1/files/{file_id}',
    path: {
        file_id: data.fileId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete File
 * Delete a file by it's id.
 * @param data The data for the request.
 * @param data.fileId
 * @returns Message Successful Response
 * @throws ApiError
 */
export const filesDeleteFile = (data: FilesDeleteFileData): CancelablePromise<FilesDeleteFileResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/files/{file_id}',
    path: {
        file_id: data.fileId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Register User
 * Create a new user with the provided credentials.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersRegisterUser = (data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/users/register',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Read User Me
 * Get the current user.
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersReadUserMe = (): CancelablePromise<UsersReadUserMeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/users/me'
}); };

/**
 * Delete User Me
 * Delete own user.
 * @returns Message Successful Response
 * @throws ApiError
 */
export const usersDeleteUserMe = (): CancelablePromise<UsersDeleteUserMeResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/users/me'
}); };

/**
 * Update User Me
 * Update the current user.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserPublic Successful Response
 * @throws ApiError
 */
export const usersUpdateUserMe = (data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/users/me',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Password Me
 * Update the current users password
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Message Successful Response
 * @throws ApiError
 */
export const usersUpdatePasswordMe = (data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/users/me/password',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };